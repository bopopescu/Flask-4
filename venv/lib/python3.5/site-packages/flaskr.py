'''
Flask个人博客
Author: AIJI
'''
import os
import sys
if os.path.dirname(__file__) not in sys.path:
    sys.path.append(os.path.dirname(__file__))
    print (sys.path)
from flask import Flask, request, session, g, redirect, url_for,\
     abort, render_template, flash


# 创建一个Flask实例
app = Flask(__name__)
app.config.from_pyfile('../default_settings.ini')
app.config.from_envvar('FLASKR_SETTINGS',silent="True")
#导入数据库
import db as flaskrdb
# 进行用户跟踪，连接程序时进行身份认证，通过认证扩展能提供针对性的体验
# 最常见的认证方法是提供用户名和密码

@app.before_request
def before_request():
    g.db = flaskrdb.connect_db(app)

@app.teardown_request
def teardown_request(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        db.close()

@app.route('/')
def show_entries():
    cur = g.db.execute('select title, text, id from entries order by id desc')
    entries = [dict(title=row[0], text=row[1], id=row[2]) for row in cur.fetchall()]
    return render_template('show_entries.html',entries=entries)

@app.route('/add', methods=['POST'])
def add_entries():
    if not session.get('logged_in'):
        abort(401)
    g.db.execute('insert into entries (title, text) values (?,?)',\
                  [request.form['title'], request.form['text']])
    g.db.commit()
    flash('New entry was posted')
    return redirect(url_for('show_entries'))

@app.route('/del', methods=['POST'])
def del_entries():
    if not session.get('admin'):
        abort(401)
    g.db.execute('delete from entries where id = ?', (request.form['id'],))
    g.db.commit()
    flash('Entry was deleted')
    return redirect(url_for('show_entries'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    dct= {row[0]:row[1] for row in g.db.execute('select username, password from users').fetchall()}
    if request.method == 'POST':
        if True:
            if request.form['username'] not in dct.keys():
                error = 'Username not Found'
            elif request.form['password'] != dct[request.form['username']]:
                error = 'Invalid Password'
            else:
                session['logged_in'] = True
                if request.form['username'] == 'AIJI':
                    session['admin'] = True
                print(session)
                flash('You were logged in')
                return redirect(url_for('show_entries'))
    return render_template('login.html', error=error)

@app.route('/sign', methods=['GET', 'POST'])
def sign():
    error = None
    dct= {row[0]:row[1] for row in g.db.execute('select username, password from users').fetchall()}
    if request.method == 'POST':
        if True:
            if request.form['username'] in dct.keys():
                error = 'Username Existed'
            elif request.form['password'] != request.form["cpassword"]:
                error = 'Password not Matched'
            else:
                g.db.execute('insert into users (username, password) values (?,?)',\
                             [request.form['username'], request.form['password']])
                g.db.commit()
                session['logged_in'] = True
                flash('You were signed in')
                return redirect(url_for('show_entries'))
    return render_template('sign.html', error=error)

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    session.pop('admin', None)
    flash('You were logged out')
    return redirect(url_for('show_entries'))

if __name__ == '__main__':
    app.run()