import os
import sys
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

def connect_db(app):
    basedir = os.path.abspath(os.path.dirname(__file__))
    app.config.from_pyfile('../default_settings.ini')
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'data.sqlite')
    return SQLAlchemy(app);

def init_db(db):
    db.drop_all()
    db.create_all()
    print ('Users Datebase Init Success.')


if __name__ == '__main__':
    app = Flask(__name__)
else:
    from flaskr import app


db = connect_db(app)
class Post(db.Model):
# 存放我的帖子
    __tablename__ = 'posts'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.Text(), index=True)
    context = db.Column(db.Text(), nullable=True)
    time = db.Column(db.DateTime())

class User(db.Model):
    # 继承自SQLAlchemy的模型，存放用户的账号信息
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, index=True)
    
    # 使用Werkzeug实现密码散列
    # TODO: 删除password属性
    password = db.Column(db.String(64))
    password_hash = db.Column(db.String(128))
    @property
    def password(self):
        raise AttributeError('password is not a readble attribute')
    @password.setter
    def password(self, password):
        self.password_hash = generate_password_hash(password)
    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):

        return '<User %r>' % self.username


if __name__ == '__main__':
    # init_db(db)

    u = User()
    u.password = 'cat'
    print(u.password_hash)
    print(u.verify_password('g'))
